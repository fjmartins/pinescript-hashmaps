// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© marspumpkin

import marspumpkin/pson/4

//@version=5
// @description: Simple hashmap implementation for pinescript. It gets your string array and transforms it into a hashmap. Before using it you need to initialize your array with the size you need for your specific case. 
library("hashmaps")

char_at(i) =>
    str.pos(' !#$%&\()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~;', i)    

hashcode_to_index(arr, hashcode) =>
    hashcode % array.size(arr)

hashcode(key) =>
    hash = 7
    length = str.length(key)
    for i = 0 to length - 1 by 1
        hash := hash * 31 + char_at(str.substring(key, i, i+1))
    
    hash

export put(string[]arr, string key, string value) =>
    if array.size(arr) > 0
        index = hashcode_to_index(arr, hashcode(key))
        pson_string = array.get(arr, index)
        if pson_string == na
            pson_string := '{}'
        
        // detecting collisions
        if pson.exists(pson_string, key)
            pson_string := pson.set(pson_string, key, value)
        else
            pson_string := pson.add(pson_string, key, value)

        array.set(arr, index, pson_string)

export get(string[]arr, string key) =>
    if array.size(arr) > 0
        pson.get(array.get(arr, hashcode_to_index(arr, hashcode(key))), key)
    
if barstate.islast
    hashmap = array.new_string(10000, na)
    put(hashmap, 'key', '{a={key:value}:c=d}')
    put(hashmap, 'key1', '{a={key:value}:c=d}')
    put(hashmap, 'key2', '{e=f:g=h}')
    pson_string = get(hashmap, 'key')
    output = pson.get(pson_string, 'a')
    
    label.new(x=bar_index, y=high, textcolor=color.yellow, text=output, size=size.normal, style=label.style_none)
    
plot(close)