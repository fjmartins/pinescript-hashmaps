// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© marspumpkin(TradingView), @definitelyfabio(Twitter), @fjmartins(GitHub)

//@version=5
library("hashmap")

char_at(i) =>
    str.pos(' !#$%&\()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~;', i)    

hashcode_to_index(arr, hashcode) =>
    hashcode % array.size(arr)

hashcode(key) =>
    hash = 7
    length = str.length(key)
    for i = 0 to length - 1 by 1
        hash := hash * 31 + char_at(str.substring(key, i, i+1))
    
    hash

// string array
export put(string[]arr, string key, string value) =>
    if array.size(arr) > 0
        array.set(arr, hashcode_to_index(arr, hashcode(key)), value)

export get(string[]arr, string key) =>
    array.get(arr, hashcode_to_index(arr, hashcode(key)))

// int array
export put(int[]arr, string key, int value) =>
    if array.size(arr) > 0
        array.set(arr, hashcode_to_index(arr, hashcode(key)), value)

export get(int[]arr, string key) =>
    array.get(arr, hashcode_to_index(arr, hashcode(key)))

// float array
export put(float[]arr, string key, float value) =>
    if array.size(arr) > 0
        array.set(arr, hashcode_to_index(arr, hashcode(key)), value)

export get(float[]arr, string key) =>
    array.get(arr, hashcode_to_index(arr, hashcode(key)))

if barstate.islast
    hashmap = array.new_string(10000, na)
    
    put(hashmap, 'key', 'my value')
    put(hashmap, 'key1', 'my value 1')
    
    label.new(x=bar_index, y=high, textcolor=color.yellow, text=get(hashmap, 'key'), size=size.normal, style=label.style_none)
    
plot(close)